#!/usr/bin/env node
'use strict'

require('../bootstrap')

const Moment = require('moment')
const config = require('config')
const moment = new Moment()
const date = moment.format('YYYYMMDD')
const time = moment.format('HHmm')
const Promise = require('bluebird')
const debug = require('debug')
const Section = require('../models/section')
const PubuHelper = require('../libs/pubu-helper')
const hintTime = Section.toScheduleHintTime(time)
const request = function (url, data) {
  return new Promise(function (res, rej) {
    require('request').post(url, { form: data }, function (err, resp) {
      if (err) { return rej(err) }
      res(resp)
    })
  })
}

process.stdout.write(`Ready to check at ${date}${time} (hint time: ${hintTime})\n`)

Promise.all([
  // morning
  Section.find({ webhook: { $exists: true }, scheduleStart: time })
    .then(sections => {
      let logger = debug('bin/chk:morning')
      logger(`found ${sections.length} enabled sections`)
      return Promise.all(sections.map(s => {
        return s.findAvailableUsersWhen(date)
          .then(users => {
            logger(`section: ${s.id},  available users: ${users.length}`)
            if (!users.length) { return }
            let mentions = users.map(u => u.toMention())
            logger(`sent for morning: ${s.team} ${s.channel}`)
            return request(
              s.webhook,
              PubuHelper.createStableMessage(`Morning, ${mentions.join(' ')} . \nWhat's your plans today`)
            )
          })
      }))
    }),
  // evening
  Section.find({ webhook: { $exists: true }, scheduleEnd: time })
    .then(sections => {
      let logger = debug('bin/chk:evening')
      logger(`found ${sections.length} enabled sections`)
      return Promise.all(sections.map(s => {
        return s.findAvailableUsersWhen(date)
          .then(users => {
            logger(`section: ${s.id},  available users: ${users.length}`)
            if (!users.length) { return }
            let mentions = users.map(u => u.toMention())
            logger(`sent for evening: ${s.team} ${s.channel}`)
            return request(
              s.webhook,
              PubuHelper.createStableMessage(`Evening, ${mentions.join(' ')} . \nShow me your ass`)
            )
          })
      }))
    }),
  // hint
  Section.find({ webhook: { $exists: true }, scheduleEnd: hintTime })
    .then(sections => {
      let logger = debug('bin/chk:hint')
      logger(`${sections.length} sections to hint`)
      return Promise.all(sections.map(s => {
        let url = `${config.siteUrl}/${s.channel}/${moment.format('YYYY-MM-DD')}`
        return request(
          s.webhook,
          PubuHelper.createStableMessage(`Today\'s task report: <a href="${url}">${url}</a>`)
        )
      }))
    })
])
  .then(function () {
    process.stdout.write('Done', '\n')
    process.exit()
  })
  .catch(function (err) {
    process.stdout.write(err.stack, '\n')
    process.exit(1)
  })
